from django.shortcuts import render
from web3 import Web3
import json
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.models import User, auth
from django.contrib import messages
from django.core.mail import send_mail
from django.views.decorators.cache import cache_control

from django.conf import settings
# Create your views here.


def index(request):
    return render(request, 'index.html')

def blockchain(request):
    if request.method == "POST":
        seller_name = request.POST['seller_name']
        seller_aadhar_no = request.POST['seller_aadhar_no']
        registration_price = request.POST['registration_price']
        buyer_name = request.POST['buyer_name']
        buyer_aadhar_no = request.POST['buyer_aadhar_no']
        land_id = request.POST['land_id']
        old_coordinates = request.POST['old_coordinates']
        new_coordinates = request.POST['new_coordinates']
        seller_email = request.POST['seller_email']
        buyer_email = request.POST['buyer_email']



    ganache_url = 'http://127.0.0.1:7545'
    web3 = Web3(Web3.HTTPProvider(ganache_url))

    print(web3.isConnected())

    web3.eth.defaultAccount = web3.eth.accounts[1]



    abi = json.loads('''[
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_input",
				"type": "string"
			}
		],
		"name": "setCurrentOwner",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "CurrentOwner",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "Buyer",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "Price",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "LandId",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "aadharCurrOwner",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "aadharBuyer",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "OldLandCoord",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "NewLandCoord",
				"type": "string"
			}
		],
		"name": "setDetails",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getCurrentOwner",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getDetails",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getPreviousOwner",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]''')
    bytecode = '608060405234801561001057600080fd5b50610dd1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632b3b92c31461005c578063a18a186b14610078578063be38cd6f14610096578063dd135910146100b2578063fbbf93a0146100d0575b600080fd5b61007660048036038101906100719190610932565b6100f6565b005b6100806101d9565b60405161008d9190610b10565b60405180910390f35b6100b060048036038101906100ab91906108e9565b61026d565b005b6100ba610289565b6040516100c79190610b10565b60405180910390f35b6100d861031e565b6040516100ed99989796959493929190610b32565b60405180910390f35b8660008001908051906020019061010e9291906107d6565b5087600060010190805190602001906101289291906107d6565b5085600060020190805190602001906101429291906107d6565b50846000600301908051906020019061015c9291906107d6565b5083600060040190805190602001906101769291906107d6565b5082600060050190805190602001906101909291906107d6565b504260006006018190555081600060070190805190602001906101b49291906107d6565b5080600060080190805190602001906101ce9291906107d6565b505050505050505050565b60606000800180546101ea90610cb5565b80601f016020809104026020016040519081016040528092919081815260200182805461021690610cb5565b80156102635780601f1061023857610100808354040283529160200191610263565b820191906000526020600020905b81548152906001019060200180831161024657829003601f168201915b5050505050905090565b806000800190805190602001906102859291906107d6565b5050565b60606000600101805461029b90610cb5565b80601f01602080910402602001604051908101604052809291908181526020018280546102c790610cb5565b80156103145780601f106102e957610100808354040283529160200191610314565b820191906000526020600020905b8154815290600101906020018083116102f757829003601f168201915b5050505050905090565b606080606080606080606080600080600001600060010160006002016000600301600060040160006005016000600701600060080160006006015488805461036590610cb5565b80601f016020809104026020016040519081016040528092919081815260200182805461039190610cb5565b80156103de5780601f106103b3576101008083540402835291602001916103de565b820191906000526020600020905b8154815290600101906020018083116103c157829003601f168201915b505050505098508780546103f190610cb5565b80601f016020809104026020016040519081016040528092919081815260200182805461041d90610cb5565b801561046a5780601f1061043f5761010080835404028352916020019161046a565b820191906000526020600020905b81548152906001019060200180831161044d57829003601f168201915b5050505050975086805461047d90610cb5565b80601f01602080910402602001604051908101604052809291908181526020018280546104a990610cb5565b80156104f65780601f106104cb576101008083540402835291602001916104f6565b820191906000526020600020905b8154815290600101906020018083116104d957829003601f168201915b5050505050965085805461050990610cb5565b80601f016020809104026020016040519081016040528092919081815260200182805461053590610cb5565b80156105825780601f1061055757610100808354040283529160200191610582565b820191906000526020600020905b81548152906001019060200180831161056557829003601f168201915b5050505050955084805461059590610cb5565b80601f01602080910402602001604051908101604052809291908181526020018280546105c190610cb5565b801561060e5780601f106105e35761010080835404028352916020019161060e565b820191906000526020600020905b8154815290600101906020018083116105f157829003601f168201915b5050505050945083805461062190610cb5565b80601f016020809104026020016040519081016040528092919081815260200182805461064d90610cb5565b801561069a5780601f1061066f5761010080835404028352916020019161069a565b820191906000526020600020905b81548152906001019060200180831161067d57829003601f168201915b505050505093508280546106ad90610cb5565b80601f01602080910402602001604051908101604052809291908181526020018280546106d990610cb5565b80156107265780601f106106fb57610100808354040283529160200191610726565b820191906000526020600020905b81548152906001019060200180831161070957829003601f168201915b5050505050925081805461073990610cb5565b80601f016020809104026020016040519081016040528092919081815260200182805461076590610cb5565b80156107b25780601f10610787576101008083540402835291602001916107b2565b820191906000526020600020905b81548152906001019060200180831161079557829003601f168201915b50505050509150985098509850985098509850985098509850909192939495969798565b8280546107e290610cb5565b90600052602060002090601f016020900481019282610804576000855561084b565b82601f1061081d57805160ff191683800117855561084b565b8280016001018555821561084b579182015b8281111561084a57825182559160200191906001019061082f565b5b509050610858919061085c565b5090565b5b8082111561087557600081600090555060010161085d565b5090565b600061088c61088784610c1c565b610bf7565b9050828152602081018484840111156108a8576108a7610d7b565b5b6108b3848285610c73565b509392505050565b600082601f8301126108d0576108cf610d76565b5b81356108e0848260208601610879565b91505092915050565b6000602082840312156108ff576108fe610d85565b5b600082013567ffffffffffffffff81111561091d5761091c610d80565b5b610929848285016108bb565b91505092915050565b600080600080600080600080610100898b03121561095357610952610d85565b5b600089013567ffffffffffffffff81111561097157610970610d80565b5b61097d8b828c016108bb565b985050602089013567ffffffffffffffff81111561099e5761099d610d80565b5b6109aa8b828c016108bb565b975050604089013567ffffffffffffffff8111156109cb576109ca610d80565b5b6109d78b828c016108bb565b965050606089013567ffffffffffffffff8111156109f8576109f7610d80565b5b610a048b828c016108bb565b955050608089013567ffffffffffffffff811115610a2557610a24610d80565b5b610a318b828c016108bb565b94505060a089013567ffffffffffffffff811115610a5257610a51610d80565b5b610a5e8b828c016108bb565b93505060c089013567ffffffffffffffff811115610a7f57610a7e610d80565b5b610a8b8b828c016108bb565b92505060e089013567ffffffffffffffff811115610aac57610aab610d80565b5b610ab88b828c016108bb565b9150509295985092959890939650565b6000610ad382610c4d565b610add8185610c58565b9350610aed818560208601610c82565b610af681610d8a565b840191505092915050565b610b0a81610c69565b82525050565b60006020820190508181036000830152610b2a8184610ac8565b905092915050565b6000610120820190508181036000830152610b4d818c610ac8565b90508181036020830152610b61818b610ac8565b90508181036040830152610b75818a610ac8565b90508181036060830152610b898189610ac8565b90508181036080830152610b9d8188610ac8565b905081810360a0830152610bb18187610ac8565b905081810360c0830152610bc58186610ac8565b905081810360e0830152610bd98185610ac8565b9050610be9610100830184610b01565b9a9950505050505050505050565b6000610c01610c12565b9050610c0d8282610ce7565b919050565b6000604051905090565b600067ffffffffffffffff821115610c3757610c36610d47565b5b610c4082610d8a565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610ca0578082015181840152602081019050610c85565b83811115610caf576000848401525b50505050565b60006002820490506001821680610ccd57607f821691505b60208210811415610ce157610ce0610d18565b5b50919050565b610cf082610d8a565b810181811067ffffffffffffffff82111715610d0f57610d0e610d47565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f830116905091905056fea26469706673582212208ee79636c51978e83975ed223d31df65ea59bfecadf4054310d7ae4100f8bb5164736f6c63430008070033'

    set = web3.eth.contract(abi=abi, bytecode=bytecode)
    setDetails = web3.eth.contract(abi=abi, bytecode=bytecode)

    tx_hash = setDetails.constructor().transact()

    tx_reciept = web3.eth.wait_for_transaction_receipt(tx_hash)

    contract = web3.eth.contract(
        address=tx_reciept.contractAddress,
        abi=abi
    )

    tx_hash = contract.functions.setDetails(buyer_name, seller_name, registration_price, land_id, seller_aadhar_no, buyer_aadhar_no,
                                            old_coordinates, new_coordinates).transact()
    tx_reciept = web3.eth.wait_for_transaction_receipt(tx_hash)
    print(tx_reciept['from'])

    subject = 'Transactin reciept for your land registry'
    # message = f'Hi this is the transaction reciept for your recent land transaction:  {tx_reciept}'
    message = f'''
        Hi! This is your transaction reciept for your latest land transaction smart contract:
        Buyer and Seller Details:
        
        seller name : {seller_name}
        buyer name : {buyer_name}
        deal price : {registration_price}
        land id : {land_id}
        transactionHash = {tx_reciept['transactionHash']}
        blockHash = {tx_reciept['blockHash']}
        blockNumber = {tx_reciept['blockNumber']}
        from = {tx_reciept['from']}
        to = {tx_reciept['to']}
        gasUsed = {tx_reciept['gasUsed']}
    '''
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [buyer_email, seller_email]
    send_mail(subject, message, email_from, recipient_list)
    return redirect('/success')


def officerlogin(request):
    if request.method == "POST":
        username = request.POST['username']
        password = request.POST['password']

        user = auth.authenticate(username=username, password=password)
        if user is not None:
            auth.login(request, user)
            return redirect('/registration_page')
        else:
            messages.info(request, 'wrong login credentials')
            return redirect('/officerlogin')
    else:
        return render(request, 'landofficerloginpage.html')

def registration_page(request):
    return render(request, 'buyer_seller_detail_entry.html')

def sendmail(email, tx_reciept):
    subject = 'Transactin reciept for your land registry'
    message = f'Hi this is the transaction reciept for your recent land transaction:  {tx_reciept}'
    email_from = settings.EMAIL_HOST_USER
    recipient_list = ['arjunkulkarni23@gmail.com']
    send_mail(subject, message, email_from, recipient_list)


def aboutus(request):
    return render(request, 'aboutus.html')

def contactus(request):
    return render(request, 'contactus.html')

def success(request):
    return render(request, 'success.html')

def marketplace(request):
    return render(request, 'marketplace.html')
